ggplot(df_vel, aes(v.elision, position, size=numbers, label=names, legend=FALSE)) +
geom_point(color='lightblue', show.legend=FALSE) + scale_size(range = c(10, 30)) +
labs(title='Correlation between [v] elision and phrasal position', x='[v] elision', y='phrasal position') +
geom_text(aes(label=names), size=4)
# Задание 1.3
# чувс
# Задание 1.4 - тут subtitle не работает
filter(data_vel, group=='third', position=='strong') %>% ggplot(aes(x = v.elision, fill = word)) +
geom_bar(stat='count', position=position_dodge()) +
labs(title='The correlation between [v] elision and the root',
subtitle = 'Strong phrasal position, Third group',
x='[v] elision', y='number of cases')
# Задание 2.1
data_voc <- read.csv('https://goo.gl/LQAyJ9')
d <- gather(data_voc, key = vowel, value = length, a.vtl, e.vtl, i.vtl, o.vtl, u.vtl)
d <- d[,c(1, 5, 6)]
xtick <- c('a', 'e', 'i', 'o', 'u')
ggplot(d, aes(vowel, length)) +
geom_boxplot() +
labs(title='Correlation between the length of the ocal tract and the vowel type',
x='vowel type', y='length of vocal tract') +
geom_hline(aes(yintercept=mean(d$length)), linetype='dashed') +
scale_x_discrete(labels = xtick)
# Задание 2.2 - trim не полностью работает
ggplot(d, aes(vowel, length)) +
geom_violin(trim=FALSE, fill = 'lightblue', color = 'lightblue') +
geom_point(aes(shape="—"), size=5) + scale_shape_identity() +
labs(title='Correlation between the length of the ocal tract and the vowel type',
x='vowel type', y='length of vocal tract') + scale_x_discrete(labels = xtick)
# Задание 2.3
# http://www.cookbook-r.com/Manipulating_data/Summarizing_data/
mtcars %>% ggplot(aes(mpg, qsec)) +
geom_point(data=mtcars[,-2], aes(mpg, qsec), size=4, color='grey') +
geom_point(size=4, aes(factor=cyl)) +
facet_wrap(~cyl)
# binwidth=nclass.FD(d$length)
d %>% ggplot(aes(length))+
geom_histogram(data=d[,-2], aes(length), binwidth=0.57, color="grey")+
geom_histogram(aes(fill=vowel), binwidth=0.57)+
facet_wrap(~vowel)
# Задание 2.4
# [Sturges 1926] and [Freedman, Diaconis 1981]
# Задание 2.5
ggplot(d, aes(x = ID, y = a, fill = vowel)) +
geom_point(aes(x = ID, y = length, fill = vowel, shape = vowel), size = 5) +
scale_shape_identity() +
ggtitle("Length of the vocal tract for each speaker") +
xlab("speakers") + ylab("length of the vocal tract") +
theme(legend.position="none")
d
ggplot(d, aes(x = ID, y = length, fill = vowel)) +
geom_point(aes(x = ID, y = length, fill = vowel, shape = vowel), size = 5) +
scale_shape_identity() +
ggtitle("Length of the vocal tract for each speaker") +
xlab("speakers") + ylab("length of the vocal tract") +
theme(legend.position="none")
ggplot(d, aes(x = ID, y = length, fill = vowel)) +
geom_point(aes(x = ID, y = length, fill = vowel, shape = vowel), size = 5) +
scale_shape_identity() +
ggtitle("Length of the vocal tract for each speaker") +
xlab("speakers") + ylab("length of the vocal tract") +
theme(legend.position="none")
m <- matrix(c(5485,8318,15913,8259),ncol=2,byrow=TRUE)
m
m <- matrix(c(5485,8318,15913,8259),ncol=2,byrow=TRUE)
colnames(m) <- c("First","Second")
rownames(m) <- c("Before","After")
m
m <- matrix(c(5485,8318,15913,8259),ncol=2,byrow=TRUE)
colnames(m) <- c("Before","After")
rownames(m) <- c("First","Second")
m
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
M
(Xsq <- chisq.test(M))
(Xsq <- chisq.test(m))
rus <- read.csv('http://goo.gl/KljqjU')
pol <- read.csv('http://goo.gl/xNozm2')
rus
rus %>%
group_by(prep, case)
library(tidyverse)
rus %>% group_by(prep, case)
rus %>% summarise()
rus %>% summarise(prep, case, count=n())
rus %>% summarise(prep, count=n())
rus %>% summarise(prep, count=n())
rus %>% summarise(prep, acc=count(acc))
rus %>% summarise(prep=prep, acc=count(acc))
rus %>% summarise(prep, acc=count(acc))
summary(rus)
table(rus)
(Xsq <- chisq.test(table(rus)))
(Xsq <- chisq.test(table(pol)))
table(pol)
(Xsq <- chisq.test(table(pol))$expected)
(Xsq <- chisq.test(table(pol))$expected>5)
(Fish <- fisher.test(table(pol)))
m <- matrix(c(11, 30, 5, 511, 59, 576, 0, 8, 2, 58), ncol=2,byrow=TRUE)
m
m <- matrix(c(11, 30, 5, 511, 59, 576, 0, 8, 2, 58), ncol=2,byrow=TRUE)
colnames(m) <- c("Student","WALS")
rownames(m) <- c("No adpositions","Prepositions", 'Postpositions', 'Inpositions', 'No dominant order')
m
(Xsq <- chisq.test(table(m))$expected>5)
(Xsq <- chisq.test(m)$expected>5)
(Fish <- fisher.test(m))
head(data)
data <- read.csv("http://goo.gl/txmyO9", sep = "\t")
head(data)
data <- data[, -1]
data
cor(data)
cor(data, method="spearman")
cor(data, method="kendall")
install.packages("lme4")
install.packages("lintypology")
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'rocknroll')
install.packages("lintypology")
install.packages("lme4")
install.packages("lintypology")
lapsyd <- read.csv("https://goo.gl/eD4S5n")
library(lme4)
lapsyd <- read.csv("https://goo.gl/eD4S5n")
View(lapsyd)
map.feature(lapsyd$name, features = lapsyd$area)
model1<-lm(count_vowel~count_consonant, lapsyd)
summary(model1)
count_vowel = 7.38236 + 0.04065*count_consonant
model1<-lm(count_vowel~count_consonant, lapsyd)
View(lapsyd)
summary(model1)
count_vowel = 7.38236 + 0.04065*count_consonant
ggplot(fit1) + geom_point() + geom_line(aes(count_consonant, model1))
library(tidyverse)
install.packages("tidyverse")
model2 <- lmer(count_vowel~count_consonant + (1 | area), lapsyd)
summary(model2)
fit1 <- model1
lapsyd$model1 <- predict(fit1)
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(), color = "lightblue") +
geom_line(aes(count_consonant, model1))
install.packages("tidyverse")
library(tidyverse)
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(), color = "lightblue") +
geom_line(aes(count_consonant, model1))
summary(model2)
lapsyd$model2 <- predict(fit2)
fit2 <- model2
lapsyd$model2 <- predict(fit2)
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(), color = "lightblue") +
geom_line(aes(count_consonant, model2, color = area))
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes()) +
geom_line(aes(count_consonant, model2, color = area))
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(), color = area) +
geom_line(aes(count_consonant, model2, color = area))
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(), color = model2$area) +
geom_line(aes(count_consonant, model2, color = area))
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(color = area)) +
geom_line(aes(count_consonant, model2, color = area))
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(color = area)) +
geom_line(aes(count_consonant, model2, color = area))
model3 <- lmer(dependent_variable~fixed_effect_variables +
(1+fixed_effect_variables | random_effect_variables),
data = your_dataframe)
model3 <- lmer(dependent_variable~fixed_effect_variables +
(1+fixed_effect_variables | random_effect_variables),
lapsyd)
View(lapsyd)
model3 <- lmer(count_vowel~count_consonant +
(1+count_consonant | area),
lapsyd)
summary(model3)
fit3 <- model3
lapsyd$model3 <- predict(fit3)
lapsyd %>%
ggplot(aes(count_consonant, count_vowel)) +
geom_point( aes(color = area)) +
geom_line(aes(count_consonant, model3, color = area))
model4 <- lmer(count_vowel~count_consonant
+ (0+count_consonant | area),
lapsyd)
library(tidyverse)
data = read.csv('/Users/IrinaPavlova/Desktop/Uni/Бакалавриат/2015-2016/Programming/github desktop/RusDraCor/Calculating_stuff_in_plays/num_of_stuff_in_plays.csv')
View(data)
View(data)
gplot(data, aes(Num_of_char~Year_of_creation))
ggplot(data, aes(Num_of_char~Year_of_creation))
plot(data)
plot(data$Num_of_char, data$Year_of_creation)
plot(data$Year_of_creation, data$Num_of_char)
abline()
abline(data$Year_of_creation~data$Num_of_char)
plot(data$Year_of_creation, data$Num_of_char)
abline(data$Year_of_creation~data$Num_of_char)
plot(data$Year_of_creation, data$Num_of_char)
abline(dlm(ata$Year_of_creation~data$Num_of_char))
plot(data$Year_of_creation, data$Num_of_char)
abline(lm(ata$Year_of_creation~data$Num_of_char))
plot(data$Year_of_creation, data$Num_of_char)
abline(lm(data$Year_of_creation~data$Num_of_char))
plot(data$Year_of_creation, data$Num_of_char)
abline(lm(data$Num_of_char~data$Year_of_creation))
plot(data$Year_of_creation, data$Num_of_char)
abline(data$Num_of_char~data$Year_of_creation)
plot(data$Year_of_creation, data$Num_of_char)
abline(lm(data$Num_of_char~data$Year_of_creation))
library(tidyverse)
library(tidyverse)
library(plotly)
library(plotrix)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
setwd('/Users/IrinaPavlova/Desktop/Uni/Бакалавриат/2015-2016/Programming/github desktop/RusDraCor/Calculating_stuff_in_plays')
data = read.csv('calculations.csv', stringsAsFactors=FALSE)
data = data.frame(data)
data[data=="empty weights"] <- 0
data[, 5:6] <- sapply(data[, 5:6], as.numeric)
data
char_data <- aggregate(data[, 4], list(Year_of_creation=data$Year_of_creation), mean)
BG <- subset(char_data, Year_of_creation == "1825")
char_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
geom_text(data=BG, label="Boris Godunov", vjust=1) +
labs(title='Number of characters in Russian drama',
x='Number of characters', y='Year of creation')
scenes_data <- aggregate(data[, 3], list(Year_of_creation=data$Year_of_creation), mean)
scenes_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
labs(title='Number of scenes/acts in Russian drama',
x='Number of scenes/acts', y='Year of creation')
degree_data <- aggregate(data[, 6], list(Year_of_creation=data$Year_of_creation), mean)
BG <- subset(degree_data, Year_of_creation == "1825")
degree_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
geom_text(data=BG, label="Boris Godunov") +
labs(title='Max character degree in Russian drama',
x='Max degree', y='Year of creation')
boris_godunov <- read.csv('ready_CSV/Pushkin_-_Boris_Godunov.csv', sep = ";")
boris_godunov <- boris_godunov[, c(1, 3, 4)]
head(boris_godunov)
net <- graph_from_data_frame(d=boris_godunov, directed=F)
class(net)
E(net)$weight <- boris_godunov$Weight
clust <- cluster_optimal(net)
clust
plot(net,
vertex.size=3,
edge.arrow.size=.6,
vertex.label=V(net)$name,
edge.width=E(net)$weight)
net <- network(boris_godunov, directed=FALSE)
ggplot(data = boris_godunov, aes(from_id=Source, to_id=Target)) + geom_net(layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5)
char_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
geom_text(data=BG, label="Boris Godunov", vjust=1) +
labs(title='Number of characters in Russian drama',
x='Number of characters', y='Year of creation')
model2 <- cforest(s.deletion ~ phon.cont + social, data=data, controls=cforest_unbiased(ntree=100, mtry=2))
library(party)
library(party)
data <- read.csv('http://goo.gl/aE3yVg')
# Задание 1.1
model1 <- ctree(v.elision ~ ., data=data)
plot(model1)
# Задание 1.2
model1
# Задание 1.3
# yes -- а как predict
sub <- subset(data, word=='попеч' & group=='third' & position=='strong')
predict(model1, newdata=sub) # не работает
# Задание 1.4
model2 <- cforest(v.elision ~ ., data=data, controls=cforest_unbiased(ntree=1000, mtry=3))
predict(model2, newdata=sub, OOB=TRUE)
# Задание 1.5
varimp(model2)
# Задание 2.1
# Ответ: 1258
# Задание 2.2
data <- read.csv('http://goo.gl/F9m4O2')
head(data)
model <- ctree(s.deletion ~ phon.cont + social, data=data)
print(model)
# Ответ: vowel vs. pause
# Задание 2.3
sub <- subset(data, phon.cont=='consonant' & social==1)
predict(model, newdata=sub)
# Задание 2.4
model2 <- cforest(s.deletion ~ phon.cont + social, data=data, controls=cforest_unbiased(ntree=100, mtry=2))
predict(model2, newdata=sub, OOB=TRUE)
varimp(model2)
glm(model1)
---
title: "Drama Analysis"
author: "Ira Pavlova"
date: "May 2017"
output:
github_document:
html_preview: false
---
### This project is devoted to studying the evolution of Russian drama. The study is based on the Russian Drama Corpus which now contains 49 Russian plays encoded in TEI. The creation time of plays ranges from 1747 to 1925.
```{r results='hide', warning=FALSE, message=FALSE}
library(tidyverse)
library(plotly)
library(plotrix)
library(network)
library(sna)
library(GGally)
library(geomnet)
library(ggnetwork)
library(igraph)
setwd('/Users/IrinaPavlova/Desktop/Uni/Бакалавриат/2015-2016/Programming/github desktop/RusDraCor/Calculating_stuff_in_plays')
data = read.csv('calculations.csv', stringsAsFactors=FALSE)
data = data.frame(data)
data[data=="empty weights"] <- 0
data[, 5:6] <- sapply(data[, 5:6], as.numeric)
data
```
### This graph shows how the number of characters in plays was changing from 1750 to 1950. The observations are the mean number of characters in plays of a particular year.
```{r}
char_data <- aggregate(data[, 4], list(Year_of_creation=data$Year_of_creation), mean)
BG <- subset(char_data, Year_of_creation == "1825")
char_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
geom_text(data=BG, label="Boris Godunov", vjust=1) +
labs(title='Number of characters in Russian drama',
y='Number of characters', x='Year of creation')
```
### This graph shows how the number of scenes/acts in plays was changing from 1750 to 1950. The observations are the mean number of scenes/acts in plays of a particular year.
```{r}
scenes_data <- aggregate(data[, 3], list(Year_of_creation=data$Year_of_creation), mean)
scenes_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
labs(title='Number of scenes/acts in Russian drama',
y='Number of scenes/acts', x='Year of creation')
```
### This graph shows how the maximum degree of a character in plays was changing from 1750 to 1950. The observations are the mean number of max degree in plays of a particular year.
```{r}
degree_data <- aggregate(data[, 6], list(Year_of_creation=data$Year_of_creation), mean)
BG <- subset(degree_data, Year_of_creation == "1825")
degree_data %>% ggplot(aes(Year_of_creation, x)) +
geom_point() +
geom_line() + scale_x_continuous(breaks=seq(1700, 1950, 50)) +
geom_text(data=BG, label="Boris Godunov") +
labs(title='Max character degree in Russian drama',
y='Max degree', x='Year of creation')
```
### Making network visualization
```{r}
boris_godunov <- read.csv('ready_CSV/Pushkin_-_Boris_Godunov.csv', sep = ";")
boris_godunov <- boris_godunov[, c(1, 3, 4)]
head(boris_godunov)
net <- graph_from_data_frame(d=boris_godunov, directed=F)
net
E(net)$weight <- boris_godunov$Weight
clust <- cluster_optimal(net)
modularity(clust)
membership(clust)
E(net)$weight > 1
# prettyColors <- c("turquoise4", "azure4", "olivedrab","deeppink4")
# communityColors <- prettyColors[membership(clust)]
layout = layout.fruchterman.reingold(net)
layout=layout.kamada.kawai(net, kkconst=50)
# vertex.label= ifelse(V(net)$name %in% c('Drugoj'),V(net)$name, NA)
plot(net,
vertex.size=3,
edge.arrow.size=.6,
vertex.label=V(net)$name,
edge.width=E(net)$weight*0.5,
layout=layout.graphopt,
vertex.label.color = "black",
vertex.label.cex = 0.5,
vertex.color = membership(clust))
net <- network(boris_godunov, directed=FALSE)
ggplot(data = boris_godunov, aes(from_id=Source, to_id=Target)) + geom_net(layout.alg = "kamadakawai",
size = 2, labelon = TRUE, vjust = -0.6, ecolour = "grey60",
directed =FALSE, fontsize = 3, ealpha = 0.5)
```
### Notes
# 1. Keep CamelCase when tranforming TEI to CSV
# 2. Use clustering in igraph
# 3. Add degree tables (as vertices to net)
data <- read.csv('http://goo.gl/aE3yVg')
dist(data)
data
data <- read.csv('http://goo.gl/nLkHLq')
dist(data)
data
dist(data)
library(tidyverse)
dist(data)
matrix(data)
dist(data)
head(data)
dist(data)
dist(matrix(data))
dist(matrix(data))
data <- read.csv('http://goo.gl/nLkHLq')
dist(matrix(data))
head(data)
dist(data[,3:6])
head(data)
kmeans(data, set.seed(42))
set.seed(42)
kmeans(data)
kmeans(data, 3)
data <- read.csv('http://goo.gl/Zjr9aF')
data
dist(data)
min(dist(data))
set.seed(42)
kmeans(data, 2)
km <- kmeans(data, 2)
plot(data, col = km$cluster)
head(data)
sd(data$perceived.as.homo.percent)
data <- data[, 2:9]
data
kmeans(data, 2)
NA %in% data
shvadesh <- read.csv('http://goo.gl/nLkHLq', fileEncoding = "UTF-8")
View(shvadesh)
dist(shvadesh)
shvadesh_LL <- shvadesh[4:5]
View(shvadesh_LL)
shvadesh_T_LL <-t(shvadesh_LL)
dist(shvadesh)
shvadesh_LL <- shvadesh[4:5]
View(shvadesh_LL)
shvadesh_T_LL <-t(shvadesh_LL)
shvadesh_T_LL
dist(shvadesh_T_LL)
data <- read.csv('http://goo.gl/Zjr9aF')
вфеф
data
kmeans(t(data), 2)
set.seed(42)
kmeans(t(shvadesh[3:6]), 3)
t(data)
install.packages("stringdist")
library(stringdist)
stringdist('Antidisestablishmentarianism', 'computer')
stringdist('Antidisestablishmentarianism', 'computer')
stringdist('Antidisestablishmentarianism', 'computer', Jaccard)
stringdist('Antidisestablishmentarianism', 'computer', method='jaccard')
head(data)
data[,2::]
data[,2:]
data[,2:9]
data[,2:10]
t(data)
t(data[,2:10])
t(data)
data[,2:10]
kmeans(data[,2:10], 2)
library(datasets)
head(iris)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
kmeans(data[,2:3], 2)
head(data)
d <- data[, c(2, 3, 4, 5, 10)]
d
kmeans(d, 2)
data[c(1, 4, 5, 6, 8, 12, 14), 9]
data[c(1, 4, 5, 6, 8, 12, 14), 10]
data[c(1, 4, 5, 6, 8, 12, 14), 8]
sd(data[c(1, 4, 5, 6, 8, 12, 14), 8])
mean(data[c(1, 4, 5, 6, 8, 12, 14), 8])
Use set.seed(42)
set.seed(42)
kmeans(d, 2)
data[c(2, 3, 7, 9, 10, 11, 13), 8]
mwan(data[c(2, 3, 7, 9, 10, 11, 13), 8])
mean(data[c(2, 3, 7, 9, 10, 11, 13), 8])
sd(data[c(2, 3, 7, 9, 10, 11, 13), 8])
set.seed(42)
kmeans(t(shvadesh[3:6]), 3)
